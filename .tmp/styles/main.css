/* =============================================================
* Mixin Libraries
* =============================================================*/
@import url("//hello.myfonts.net/count/2ea710");
html {
  box-sizing: border-box;
}

*, *::after, *::before {
  box-sizing: inherit;
}

/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1, .footer-wrapper .logo {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

.menu, .lots .slick-dots, .footer-wrapper .footer-links {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* Slider */
.slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
}

.slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
}

.slick-list:focus {
  outline: none;
}

.slick-list.dragging {
  cursor: pointer;
  cursor: hand;
}

.slick-slider .slick-track,
.slick-slider .slick-list {
  -webkit-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}

.slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block;
}

.slick-track:before, .slick-track:after {
  content: "";
  display: table;
}

.slick-track:after {
  clear: both;
}

.slick-loading .slick-track {
  visibility: hidden;
}

.slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none;
}

[dir="rtl"] .slick-slide {
  float: right;
}

.slick-slide img {
  display: block;
}

.slick-slide.slick-loading img {
  display: none;
}

.slick-slide.dragging img {
  pointer-events: none;
}

.slick-initialized .slick-slide {
  display: block;
}

.slick-loading .slick-slide {
  visibility: hidden;
}

.slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}

.slick-arrow.slick-hidden {
  display: none;
}

/* =============================================================
* Settings
* =============================================================*/
@font-face {
  font-family: 'Swiss721BT';
  src: url("../fonts/2EA710_0_0.eot");
  src: url("../fonts/2EA710_0_0.eot?#iefix") format("embedded-opentype"), url("../fonts/2EA710_0_0.woff2") format("woff2"), url("../fonts/2EA710_0_0.woff") format("woff"), url("../fonts/2EA710_0_0.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'Palatino';
  src: url("../fonts/2EA710_1_0.eot");
  src: url("../fonts/2EA710_1_0.eot?#iefix") format("embedded-opentype"), url("../fonts/2EA710_1_0.woff2") format("woff2"), url("../fonts/2EA710_1_0.woff") format("woff"), url("../fonts/2EA710_1_0.ttf") format("truetype");
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: 'Palatino';
  src: url("../fonts/2EA710_2_0.eot");
  src: url("../fonts/2EA710_2_0.eot?#iefix") format("embedded-opentype"), url("../fonts/2EA710_2_0.woff2") format("woff2"), url("../fonts/2EA710_2_0.woff") format("woff"), url("../fonts/2EA710_2_0.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'AvenirLTStd-Medium';
  src: url("../fonts/2EA710_4_0.eot");
  src: url("../fonts/2EA710_4_0.eot?#iefix") format("embedded-opentype"), url("../fonts/2EA710_4_0.woff2") format("woff2"), url("../fonts/2EA710_4_0.woff") format("woff"), url("../fonts/2EA710_4_0.ttf") format("truetype");
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'Avenir';
  src: url("../fonts/2EA710_5_0.eot");
  src: url("../fonts/2EA710_5_0.eot?#iefix") format("embedded-opentype"), url("../fonts/2EA710_5_0.woff2") format("woff2"), url("../fonts/2EA710_5_0.woff") format("woff"), url("../fonts/2EA710_5_0.ttf") format("truetype");
  font-weight: 300;
  font-style: normal;
}

/* =============================================================
* Colours
* =============================================================*/
/* =============================================================
* Typography
* =============================================================*/
/* =============================================================
* Sizings
* =============================================================*/
/* =============================================================
* Media Queries
* =============================================================*/
/* =============================================================
* Global Styles
* =============================================================*/
body {
  font-family: "Avenir", Tahoma, sans-serif;
  font-weight: 300;
  -webkit-font-smoothing: antialiased;
  color: #1a1a1a;
  font-size: 5vw;
}

@media screen and (min-width: 1170px) {
  body {
    font-size: 16px;
  }
}

h1, .footer-wrapper .logo, h2, h3, h4, h5, h6 {
  font-family: "Palatino", Palatino, serif;
  text-transform: uppercase;
  font-weight: 300;
  line-height: 1;
}

h1 .lower, .footer-wrapper .logo .lower, h2 .lower, h3 .lower, h4 .lower, h5 .lower, h6 .lower {
  text-transform: none;
}

.date {
  font-weight: normal;
}

h1 .lower, .footer-wrapper .logo .lower {
  font-size: 0.8em;
  display: block;
}

sub {
  bottom: 0;
  font-size: 1em;
}

.thin {
  font-family: "Swiss721BT", Arial, sans-serif;
  font-size: 1.5rem;
  position: relative;
  bottom: -0.25rem;
  right: -0.05rem;
}

.reference {
  font-family: "Avenir", Tahoma, sans-serif;
  margin: 0 auto;
  font-size: 0.7rem;
  line-height: 1.2;
  width: 100%;
  text-align: center;
  color: #666666;
  max-width: 280px;
}

@media screen and (min-width: 48em) {
  .tablet-hidden.tablet-hidden {
    display: none;
  }
}

@media screen and (min-width: 1170px) {
  .container {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    padding: 0 1.5rem;
  }
  .container::after {
    clear: both;
    content: "";
    display: block;
  }
}

/* =============================================================
* Components
* =============================================================*/
/* =============================================================
* Generic Nav Styling
* =============================================================*/
.nav-wrapper {
  background: #1d1e1e;
  min-height: 45px;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1;
}

.menu {
  text-align: center;
  padding: 1rem;
}

.menu li a {
  display: block;
  padding: 0.6rem;
  font-size: 1.3rem;
  letter-spacing: 3px;
  color: #988468;
  text-decoration: none;
}

.menu li a:focus, .menu li a:hover {
  color: #f3f3f3;
}

.navbar {
  text-transform: uppercase;
  position: relative;
  font-family: "Palatino", Palatino, serif;
}

.navbar input[type="checkbox"] {
  display: none;
}

/* =============================================================
* Mobile Menu
* =============================================================*/
.mobile-nav {
  position: absolute;
  top: 14px;
  right: 15px;
  cursor: pointer;
  width: 30px;
  background: none;
  border: none;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

.mobile-nav:focus {
  outline: none;
}

.mobile-nav div {
  background: #988468;
  width: 100%;
  height: 2px;
}

.mobile-nav div + div {
  margin-top: 5px;
}

input#menu-toggle:checked + label + .menu {
  display: block;
  position: fixed;
  top: 45px;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: scroll;
  background: rgba(29, 30, 30, 0.98);
}

.menu {
  display: none;
}

.wordmark {
  color: #f3f3f3;
  display: none;
}

/* =============================================================
* Desktop Menu
* =============================================================*/
@media screen and (min-width: 1170px) {
  .mobile-nav {
    display: none;
  }
  .nav-wrapper {
    top: 0;
    height: 50px;
  }
  .navbar {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    padding: 0 1.5rem;
  }
  .navbar::after {
    clear: both;
    content: "";
    display: block;
  }
  .wordmark {
    display: block;
    float: left;
    font-size: 1.3rem;
    padding: 0.95rem 0;
  }
  .menu {
    float: right;
    display: block;
    padding: 0;
  }
  .menu li {
    display: inline-block;
  }
  .menu li:first-child, .menu li:last-child {
    display: none;
  }
  .menu li a {
    font-size: 0.8rem;
    padding: 1.2rem 0.4rem;
    letter-spacing: 1px;
  }
  .menu li a:focus {
    color: #988468;
  }
}

/* =============================================================
* Portrait Hero
* =============================================================*/
.hero-wrapper {
  background: url("../images/mobile_hero.jpg") 50% 50%/contain no-repeat;
  background-color: #95a2a8;
  position: relative;
}

.hero {
  min-height: 100vh;
  padding: 45px 1.5rem 1rem;
  position: relative;
}

.hero h1, .hero .footer-wrapper .logo, .footer-wrapper .hero .logo {
  color: #f3f3f3;
  max-width: 5em;
}

.hero .standfirst {
  display: none;
}

.hero .reference {
  position: absolute;
  bottom: 3rem;
  left: 50%;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  width: 100%;
  text-align: center;
  color: #666666;
}

.hero .reference .date {
  color: #f3f3f3;
}

.hero:after {
  content: '^';
  font-size: 1.2rem;
  color: #f3f3f3;
  position: absolute;
  bottom: 0.9rem;
  left: 50%;
  -webkit-transform: translateX(-50%) scaleY(-1) scaleX(1.5);
          transform: translateX(-50%) scaleY(-1) scaleX(1.5);
}

/* =============================================================
* Desktop Menu
* =============================================================*/
@media screen and (min-width: 1170px), screen and (orientation: landscape) {
  .hero-wrapper {
    background: #95a2a8;
  }
  .hero {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    background: url("../images/desktop_hero.jpg") 50% 50%/cover no-repeat;
    height: 100vh;
  }
  .hero::after {
    clear: both;
    content: "";
    display: block;
  }
  .hero h1, .hero .footer-wrapper .logo, .footer-wrapper .hero .logo {
    position: relative;
    margin-top: 0;
    font-size: 1.2em;
  }
  .hero h1:after, .hero .footer-wrapper .logo:after, .footer-wrapper .hero .logo:after {
    content: '';
    width: 5rem;
    height: 1px;
    background: rgba(243, 243, 243, 0.4);
    position: absolute;
    bottom: -0.5rem;
    left: 0;
  }
  .hero .reference {
    bottom: 1rem;
    left: 0;
    -webkit-transform: none;
            transform: none;
    color: #1a1a1a;
  }
  .hero .standfirst {
    display: block;
    font-family: "Palatino", Palatino, serif;
    font-size: 0.6em;
    max-width: 11em;
  }
  .hero-content {
    float: left;
    display: block;
    margin-right: 2.3576520234%;
    width: 46.2622326877%;
    margin-left: 53.7377673123%;
    display: table;
    height: 100%;
    color: #1a1a1a;
    position: relative;
  }
  .hero-content:last-child {
    margin-right: 0;
  }
  .hero-content .primary-content {
    display: table-cell;
    vertical-align: middle;
  }
}

@media screen and (min-width: 1170px) {
  .hero h1, .hero .footer-wrapper .logo, .footer-wrapper .hero .logo {
    font-size: 5rem;
  }
  .hero .standfirst {
    font-size: 1.8rem;
  }
  .hero .reference {
    bottom: 3rem;
  }
}

.content-wrapper {
  padding: 6rem 2.1rem;
  background: #f3f3f3;
  position: relative;
}

.introduction {
  text-align: center;
  margin-bottom: 3rem;
}

.introduction h2 {
  max-width: 10em;
  margin: 0 auto;
}

@media screen and (min-width: 1170px) {
  .introduction h2 {
    font-size: 3em;
  }
}

.introduction header {
  margin-bottom: 2rem;
  position: relative;
}

.introduction header:after {
  content: '';
  width: 5rem;
  height: 1px;
  background: rgba(152, 132, 104, 0.4);
  position: absolute;
  bottom: -2rem;
  left: 50%;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
}

.introduction .copy {
  padding-top: 2rem;
  font-family: "Palatino", Palatino, serif;
  color: #666666;
  font-size: 1.1rem;
  max-width: 35em;
  margin: 0 auto;
}

@media screen and (min-width: 1170px) {
  .introduction .copy {
    font-size: 1.8em;
  }
}

.lots {
  margin: 2rem 0 0;
}

.lots img {
  max-width: 100%;
  display: block;
  margin: 0 auto;
}

.lots .reference .date {
  color: #988468;
}

.lots .lot {
  position: relative;
}

.lots .lot:before {
  font-size: 3rem;
  color: #f3f3f3;
  background: #988468;
  border-radius: 50%;
  padding: 1rem;
  width: 80px;
  height: 80px;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
}

.lots .lot:nth-of-type(1):before {
  content: "1";
}

.lots .lot:nth-of-type(2):before {
  content: "2";
}

.lots .lot:nth-of-type(3):before {
  content: "3";
}

.lots .slick-dots {
  margin-top: 2rem;
}

.lots .slick-dots li {
  display: inline;
}

.lots .slick-dots li button {
  color: transparent;
  background: #988468;
  border: none;
  padding: 0;
  width: 10px;
  height: 10px;
}

.lots .slick-dots li button:focus {
  outline: none;
}

.lots .slick-dots li + li {
  margin-left: 2rem;
}

.lots .slick-dots li.slick-active button {
  box-shadow: 0 0 0 2px #f3f3f3, 0 0 0 3px #988468;
}

.news {
  text-align: center;
  padding-top: 3rem;
}

.news::after {
  clear: both;
  content: "";
  display: block;
}

.news > header {
  margin-bottom: 2rem;
  position: relative;
}

.news > header:after {
  content: '';
  width: 5rem;
  height: 1px;
  background: rgba(152, 132, 104, 0.4);
  position: absolute;
  bottom: -1.5rem;
  left: 50%;
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
}

.news h2 {
  font-family: "Avenir", Tahoma, sans-serif;
  font-weight: normal;
  color: #988468;
  font-size: 0.8rem;
}

.button {
  color: #988468;
  text-decoration: none;
  text-transform: uppercase;
  font-size: 0.8rem;
  font-weight: normal;
  text-align: left;
  letter-spacing: 1px;
  line-height: 1.5;
  position: relative;
  min-width: 180px;
  margin-top: 1.5rem;
  border: 2px solid #988468;
  display: inline-block;
  padding: 0.6rem 1.3rem 0.55rem;
  -webkit-transition: 0.3s ease-out all;
  transition: 0.3s ease-out all;
}

.button:after {
  content: '^';
  font-size: 1.1rem;
  font-weight: 300;
  color: #988468;
  position: absolute;
  top: 34%;
  right: 25px;
  -webkit-transform: rotate(90deg) translateX(-50%) scaleX(1.5);
          transform: rotate(90deg) translateX(-50%) scaleX(1.5);
}

.button:hover {
  background: #988468;
  color: #f3f3f3;
}

.button:hover:after {
  color: #f3f3f3;
}

.news-item {
  padding-top: 2rem;
}

@media screen and (max-width: 48em) {
  .news-item:nth-of-type(n+2) {
    display: none;
  }
}

@media screen and (min-width: 48em) and (max-width: 1170px) {
  .news-item {
    float: left;
    display: block;
    margin-right: 2.3576520234%;
    width: 48.8211739883%;
  }
  .news-item:last-child {
    margin-right: 0;
  }
  .news-item:nth-child(3n) {
    margin-right: 0;
  }
  .news-item:nth-child(3n+1) {
    clear: left;
  }
  .news-item:nth-of-type(3) {
    display: none;
  }
}

@media screen and (min-width: 1170px) {
  .news-item {
    float: left;
    display: block;
    margin-right: 2.3576520234%;
    width: 31.7615653177%;
    text-align: left;
  }
  .news-item:last-child {
    margin-right: 0;
  }
  .news-item:nth-child(4n) {
    margin-right: 0;
  }
  .news-item:nth-child(4n+1) {
    clear: left;
  }
}

.news-item h3 {
  margin-top: 0.5rem;
  font-size: 1.7rem;
}

.news-item .date {
  color: #988468;
  font-family: "Palatino", Palatino, serif;
  font-size: 2rem;
  text-transform: uppercase;
}

.news-item .date sup {
  font-size: 0.8rem;
  top: -0.8rem;
}

.news-item .date .thin {
  bottom: 0;
  font-size: 2rem;
}

.news-item .date .year {
  color: #cecece;
}

.news-item .description {
  font-size: 0.9rem;
  color: #666666;
  padding: 0 0rem;
  line-height: 1.5;
}

.news-item .description .button {
  display: none;
}

@media screen and (min-width: 48em) {
  .news-item .description .button {
    display: inline-block;
  }
}

.footer-wrapper {
  background: #1d1e1e;
}

.footer-wrapper .footer {
  padding: 3.5rem 1.5rem;
}

@media screen and (min-width: 1170px) {
  .footer-wrapper .footer {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }
  .footer-wrapper .footer::after {
    clear: both;
    content: "";
    display: block;
  }
}

.footer-wrapper .logo {
  color: #f3f3f3;
  font-size: 1.6rem;
  max-width: 10rem;
  margin-bottom: 2rem;
}

@media screen and (min-width: 48em) {
  .footer-wrapper .logo {
    font-size: 2.2rem;
  }
}

.footer-wrapper h5 {
  color: #988468;
  letter-spacing: 1px;
  font-size: 1.1rem;
  margin-bottom: 2rem;
}

.footer-wrapper .compliance {
  color: #cecece;
  font-size: 0.6rem;
  margin-bottom: 1rem;
}

.footer-wrapper .footer-links {
  list-style: none;
}

.footer-wrapper .footer-links li {
  display: inline;
}

.footer-wrapper .footer-links li + li {
  margin-left: 2rem;
}

.footer-wrapper .footer-links li + li:before {
  content: '|';
  color: #666666;
  font-size: 0.5rem;
  position: relative;
  left: -1rem;
  bottom: 0.1rem;
}

.footer-wrapper .footer-links li a {
  color: #666666;
  text-decoration: none;
  text-transform: uppercase;
  font-size: 0.6rem;
}

/*# sourceMappingURL=data:application/json;base64, */
